nbgn = 5
outgn=0
outsp =0
outcell=0
ListOut = SimOutliersHGT(tree, nbgn, outgn, outsp, outcell, sp=1)
ListOut = rename.genes(ListOut)
#genes = ListOut$genes
#ListOut = ListOut$ListTreesOut
ListOut2 = ListOut
#for (i in 1:length(genes)){
# sampSP=sample(ListOut[[genes[i]]]$tip.label, 5)
#  for (j in 1: length(sampSP)){
#   ListOut[[genes[i]]]=drop.tip(ListOut[[genes[i]]],sampSP[[j]])
# }
#}
sampGN = sample(1:length(ListOut), 3)
for (i in 1:length(sampGN)){
sampSP=sample(ListOut[[sampGN[i]]]$tip.label, 2)
for (j in 1:length(sampSP)){
ListOut[[sampGN[i]]]=drop.tip(ListOut[[sampGN[i]]],sampSP[[j]])
}
}
matricesReal= trees2mat(ListOut2, distance = "patristic")
matrices= trees2mat(ListOut, distance = "patristic")
impPCA.multi(matrices)
?impute
impPCA.multi(matrices)
impPCA.multi(matrices)
source('~/Documents/Phylter/PhylteR.R')
source('~/Documents/Phylter/PhylteR.R')
impPCA.multi(matrices)
?svd.triplet
system("pdflatex --version")
library(missMDA)
?imputePCA
?detect.cell.outliers
?IQR
?combn
?dist
?quantile
?rnorm
?cophenetic
?correction
?correction
citation("shiny")
Rd2pdf
devtools::use_testthat()
devtools::test()
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
source('~/Documents/Phylter/Simulation.R')
trees = read.tree("/home/aurore/Documents/Phylter/tree2001")
trees = read.trees("/home/aurore/Documents/Phylter/tree2001")
library(ape)
trees = read.trees("/home/aurore/Documents/Phylter/tree2001")
trees = read.tree("/home/aurore/Documents/Phylter/tree2001")
trees
ok = PhylteR(trees,distance="patristic",k=1.5,thres=0.5)
library(DistatisR)
ok = PhylteR(trees,distance="patristic",k=1.5,thres=0.5)
ok
?PhylteR
plot(trees)
trees = read.tree("/home/aurore/Documents/Phylter/tree3521")
trees = read.tree("/home/aurore/Documents/Phylter/tree3520")
plot(trees)
trees = read.tree("/home/aurore/Documents/Phylter/tree1800")
plot(trees)
ok = PhylteR(trees,distance="patristic",k=1.5,thres=0.5)
ok
tr <-c("tree1","tree2","tree3")
nb <- c(100)
outg <- c(0,1,5,10,20,50)
outs <- c(0,1,2,5,15)
outc <- c(0)
outc2 <- c(1,2,5,10,20,50,100,500,1000)
nrepet = 50
plan1 <- expand.grid(tr=tr, nb = nb, outg = outg, outs = outs, outc = outc)
plan2 <- expand.grid(tr=tr, nb = nb, outg = 0, outs = 0, outc = outc2)
plan=rbind(plan1,plan2)
plan
plan = plan[rep(1:nrow(plan),each = nrepet),]
plan
plan[100,]
plan[1000,]
plan[2000,]
trees = read.tree("/home/aurore/Documents/Phylter/tree2000")
plot(trees)
ok = PhylteR(trees,distance="patristic",k=1.5,thres=0.5)
ok
devtools::use_data()
devtools::build()
devtools::build()
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices <- function(trees, distance = "patristic") {
correction <- function(mat){
for (i in 1: nrow(mat)){
for (j in 1:ncol(mat)){
if (i != j) {mat[i,j] <- mat[i,j]-1}
}
}
return(mat)
}
if (distance == "nodal") {
trees <- lapply(trees,compute.brlen,1)
list.trees <- lapply(trees, cophenetic)
list.trees <- lapply(list.trees,correction)
}
else if (distance == "patristic") {
list.trees <- lapply(trees, cophenetic)
}
if (!is.null(names(trees))) {
names(list.trees) <- names(trees)
}
return(list.trees)
}
trees = read.tree("/home/aurore/downloadData")
trees = read.trees("/home/aurore/downloadData")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees = read.tree("/home/aurore/downloadData")
source('~/Documents/Phylter/pmcoa.R')
trees = read.tree("/home/aurore/downloadData")
trees
trees2matrices
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices()
trees2matrices
trees2matrices(trees)
trees[[1]]$Nnode
install.packages("beepr")
?beepr
beepr
beepr::beep()
beepr::beep
beepr::beep()
beepr::beep()
?beep
beepr::beep(sound = 8)
beepr::beep(sound = 9)
beepr::beep(sound = 11)
beepr::beep(sound = 10)
beepr::beep(sound = 7)
beepr::beep(sound = 6)
beepr::beep(sound = 5)
beepr::beep(sound = 4)
beepr::beep(sound = 3)
beepr::beep(sound = 2)
beepr::beep(sound = 1)
beepr::beep(sound = 8)
install.packages("beepr")
Sys.sleep(5); beepr::beep(8)
install.packages("beepr")
Sys.sleep(5); beepr::beep(8)
Sys.sleep(5); beepr::beep(4)
Sys.sleep(5); beepr::beep(4)
beepr::beep(3)
beepr::beep(3)
beepr::beep(4)
beepr::beep(5)
PhylteR(trees)
trees
class(trees)
plot(trees)
bvalue
source('~/Documents/Phylter/pmcoa.R')
plot(trees)
PhylteR(trees)
trees
?PhylteR
PhyleR(trees, "patristic")
PhylteR(trees, "patristic")
names(trees)
is.null(names(trees))
c(1:length(trees))
as.character(c(1:length(trees)))
install.packages(c("crul", "DBI", "devtools", "dplyr", "FactoMineR", "gdata", "jsonlite", "R6", "rentrez", "segmented", "shinydashboard", "tibble", "XML"))
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
source('~/Documents/Phylter/pmcoa.R')
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
arbre1 = rtree(10)
arbre12 = rtree(10)
arbre2 = rtree(10)
arbres = list()
arbres[[1]] = arbre1
arbres[[1]] = arbre2
arbres[[1]] = arbre1
arbres[[2]] = arbre2
arbres
trees2matrices(arbres)
trees2matrices(arbres, bvalue=50)
trees2matrices(arbres)
trees2matrices(arbres,distance= "nodal)
trees2matrices(arbres,distance= "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices(arbres,distance= "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices(arbres,distance= "nodal")
for (i in 1:length(trees)) {
tree<-trees[[i]]
if (distance=="nodal") {
if (bvalue!=0) {
if (!is.null(tree$node.label)) {
l<-1:Nnode(tree)
indices.nodes<-l[as.numeric(tree$node.label)<bvalue]+Ntip(tree)
if (length(indices.nodes)>0) {
for (j in 1:length(indices.nodes)) {
tree$edge.length[tree$edge[,1]==indices.nodes[j]]<-1e-10
}
}
tree<-di2multi(tree, tol=1e-9)
}
else {
tree<-di2multi(tree, tol=bvalue)
}
}
tree.brlen <- compute.brlen(tree, 1)
}
else if (distance=="patristic") {
if (bvalue!=0) {
l<-1:Nnode(tree)
indices.nodes<-l[as.numeric(tree$node.label)<bvalue]+Ntip(tree)
if (length(indices.nodes)>0) {
for (j in 1:length(indices.nodes)) {
tree$edge.length[tree$edge[,1]==indices.nodes[j]]<-1e-10
}
}
tree<-di2multi(tree, tol=1e-9)
}
tree.brlen<-tree
}
list.trees[[i]]<- tree.brlen
}
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices(arbres,distance= "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices(arbres,distance= "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices(arbres,distance= "nodal")
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
trees2matrices(arbres,distance= "nodal")
plot(arbre1)
trees2matrices(arbres,distance= "patristique")
trees2matrices(arbres,distance= "patristic")
arbre1*
arbre1
arbre1$node.label = c(100,50,35,90,98,97,58,96,65,56)
arbre2$node.label = c(33,22,99,88,55,66,95,87,52,100)
arbres[[1]]=arbre1
arbres[[2]]=arbre2
arbres
trees2matrices(arbres,bvalue=50
)
trees2matrices(arbres,bvalue=0.5)
trees2matrices(arbres,bvalue=200)
plot(arbres)
plot(arbres[[1]])
plot(arbres[[2]])
trees = rmtree(2,2)
shiny::runApp('~/Documents/PhylteR')
trees = rmtree(10,10)
gene.names = NULL
ncp = 3
center = FALSE
scale = FALSE
maxiter = 10000
Norm = "none"
trees <- rename.genes(trees, gene.names = gene.names)
RES <- NULL
matrices <- trees2matrices(trees, distance = distance, bvalue = bvalue)
matrices <- impPCA.multi(matrices, ncp = ncp, center = center, scale = scale, maxiter = maxiter)
Dist <- mat2Dist(matrices, Norm = Norm)
distance = "patristic"
trees <- rename.genes(trees, gene.names = gene.names)
RES <- NULL
matrices <- trees2matrices(trees, distance = distance, bvalue = bvalue)
matrices <- impPCA.multi(matrices, ncp = ncp, center = center, scale = scale, maxiter = maxiter)
Dist <- mat2Dist(matrices, Norm = Norm)
bvalue = 0
trees <- rename.genes(trees, gene.names = gene.names)
RES <- NULL
matrices <- trees2matrices(trees, distance = distance, bvalue = bvalue)
matrices <- impPCA.multi(matrices, ncp = ncp, center = center, scale = scale, maxiter = maxiter)
Dist <- mat2Dist(matrices, Norm = Norm)
Dist$res4Splus$F
GraphDistatisPartial(Dist$res4Splus$F, Dist$res4Splus$PartialF)
?GraphDistatisPartial
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
?ggplot
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
?as.numeric
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
?updateSelectInput
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
runApp('~/Documents/PhylteR')
?with
WR
source('~/Documents/PhylteR.R')
source('~/Documents/PhylteR.R')
source('~/Documents/PhylteR.R')
tree = read.tree(file = "/home/aurore/Documents/PhylteR/www/Aguileta-et-al-2008_TREES.txt")
PhylteR(tree)
plotDistatisPartial(tree)
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
VizualizeSpe(tree)
source('~/Documents/Phylter/PhylteR/R/PhylteR.R')
VizualizeSpe(tree)
plot(rmtree(10,10))
plot(trees)
trees = read.tree("/home/aurore/Documents/PhylteR/www/Aguileta-et-al-2008_TREES.txt")
plot(trees)
trees = read.tree("/home/aurore/Documents/PhylteR/www/Aguileta-et-al-2008_TREES.txt")
species = "Sce"
matrices <- trees2matrices(trees, distance = distance,bvalue = bvalue)
if (method.imp == "IPCA"){
TAB <- impPCA.multi(matrices, ncp = ncp, center = center, scale = scale, maxiter = maxiter)
}
else if (method.imp == "MEAN"){
TAB <- impMean(matrices)
}
else{
stop ("You should choose an imputation method : MEAN or IPCA")
}
nam <- rownames(TAB[[1]])
#TAB<-lapply(TAB, function(x,y) x[y,y],y=nam)
listx = vector()
listy = vector()
par(mfrow=c(ceiling(length(nam)/5),5))
par(mar=c(1,1,1,1))
par(oma=c(0,0,0,0))
for (j in 1:length(nam)) {
GENEi<-NULL
SP<-nam[j]
T1<-lapply(TAB, function(x) (x[SP,nam]))
T1m<-matrix(unlist(T1), nrow=length(trees), byrow=TRUE)
Means.T1m<-apply(T1m, 2, mean)
alphas<-seq(0,2*pi,length.out=length(nam)+1)
alphas<-alphas[1:length(nam)]
for (i in 1:length(trees)) {
genei<-T1m[i,]/Means.T1m
genei[is.na(genei)]<-1
GENEi<-c(GENEi, genei)
x<-genei*cos(alphas)
y<-genei*sin(alphas)
x[is.na(x)]<-0
y[is.na(y)]<-0
listx = append(listx,x)
listy = append(listy,y)
}
}
SP<-species
GENEi<-NULL
T1<-lapply(TAB, function(x) (x[SP,nam]))
T1m<-matrix(unlist(T1), nrow=length(trees), byrow=TRUE)
##T1m gives 1 plot corresponding to "Kla" for each gene.
Means.T1m<-apply(T1m, 2, mean)
##we check angles
alphas<-seq(0,2*pi,length.out=length(nam)+1)
alphas<-alphas[1:length(nam)]
##CIRCLE:
xc<-rep(1,length(nam)+1)*cos(seq(0,2*pi,length.out=length(nam)+1))
yc<-rep(1,length(nam)+1)*sin(seq(0,2*pi,length.out=length(nam)+1))
##we check angles
xc<-xc[1:length(nam)]
yc<-yc[1:length(nam)]
##for each gene, the ray is given by the proportion:
plot((max(abs(listx))/max(xc))*xc,(max(abs(listy))/max(yc))*yc,type="n", xlim=c(-max(abs(listx))-2,max(abs(listx))+2),ylim=c(-max(abs(listy))-2,max(abs(listy))+2), frame.plot=FALSE, axes=FALSE, xlab="", ylab="")
text((max(abs(listx))/max(xc))*xc,(max(abs(listy))/max(yc))*yc, labels=nam, col="light grey")
for (i in 1:length(trees)) {
genei<-T1m[i,]/Means.T1m
genei[is.na(genei)]<-1
GENEi<-c(GENEi, genei)
x<-genei*cos(alphas)
y<-genei*sin(alphas)
x[is.na(x)]<-0
y[is.na(y)]<-0
polygon(xc,yc, border="light grey", lwd=0.54)
polygon(x,y,border="red", lwd=0.8)
text(-max(max(abs(listx))/max(xc)*xc),-max(max(abs(listy))/max(yc)*yc),SP,cex=2)
}
trees = read.tree("/home/aurore/Documents/PhylteR/www/Aguileta-et-al-2008_TREES.txt")
species = "Sce"
matrices <- trees2matrices(trees, distance = distance,bvalue = bvalue)
if (method.imp == "IPCA"){
TAB <- impPCA.multi(matrices, ncp = ncp, center = center, scale = scale, maxiter = maxiter)
}
else if (method.imp == "MEAN"){
TAB <- impMean(matrices)
}
else{
stop ("You should choose an imputation method : MEAN or IPCA")
}
nam <- rownames(TAB[[1]])
#TAB<-lapply(TAB, function(x,y) x[y,y],y=nam)
listx = vector()
listy = vector()
par(mfrow=c(ceiling(length(nam)/5),5))
par(mar=c(1,1,1,1))
par(oma=c(0,0,0,0))
for (j in 1:length(nam)) {
GENEi<-NULL
SP<-nam[j]
T1<-lapply(TAB, function(x) (x[SP,nam]))
T1m<-matrix(unlist(T1), nrow=length(trees), byrow=TRUE)
Means.T1m<-apply(T1m, 2, mean)
alphas<-seq(0,2*pi,length.out=length(nam)+1)
alphas<-alphas[1:length(nam)]
for (i in 1:length(trees)) {
genei<-T1m[i,]/Means.T1m
genei[is.na(genei)]<-1
GENEi<-c(GENEi, genei)
x<-genei*cos(alphas)
y<-genei*sin(alphas)
x[is.na(x)]<-0
y[is.na(y)]<-0
listx = append(listx,x)
listy = append(listy,y)
}
}
SP<-species
GENEi<-NULL
T1<-lapply(TAB, function(x) (x[SP,nam]))
T1m<-matrix(unlist(T1), nrow=length(trees), byrow=TRUE)
##T1m gives 1 plot corresponding to "Kla" for each gene.
Means.T1m<-apply(T1m, 2, mean)
##we check angles
alphas<-seq(0,2*pi,length.out=length(nam)+1)
alphas<-alphas[1:length(nam)]
##CIRCLE:
xc<-rep(1,length(nam)+1)*cos(seq(0,2*pi,length.out=length(nam)+1))
yc<-rep(1,length(nam)+1)*sin(seq(0,2*pi,length.out=length(nam)+1))
##we check angles
xc<-xc[1:length(nam)]
yc<-yc[1:length(nam)]
##for each gene, the ray is given by the proportion:
plot((max(abs(listx))/max(xc))*xc,(max(abs(listy))/max(yc))*yc,type="n", xlim=c(-max(abs(listx))-2,max(abs(listx))+2),ylim=c(-max(abs(listy))-2,max(abs(listy))+2), frame.plot=FALSE, axes=FALSE, xlab="", ylab="")
text((max(abs(listx))/max(xc))*xc,(max(abs(listy))/max(yc))*yc, labels=nam, col="light grey")
for (i in 1:length(trees)) {
genei<-T1m[i,]/Means.T1m
genei[is.na(genei)]<-1
GENEi<-c(GENEi, genei)
x<-genei*cos(alphas)
y<-genei*sin(alphas)
x[is.na(x)]<-0
y[is.na(y)]<-0
polygon(xc,yc, border="light grey", lwd=0.54)
polygon(x,y,border="red", lwd=0.8)
text(-max(max(abs(listx))/max(xc)*xc),-max(max(abs(listy))/max(yc)*yc),SP,cex=2)
}
